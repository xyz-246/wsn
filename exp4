#include "ns3/core-module.h" 
#include "ns3/network-module.h" 
#include "ns3/internet-module.h" 
#include "ns3/point-to-point-module.h" 
#include "ns3/applications-module.h" 
#include "ns3/wifi-module.h" 
using namespace ns3; 
bool DetectIntrusion(Ptr<Packet> packet){ 
if(packet->GetSize()>1024){ 
NS_LOG_UNCOND("Intrusion detected: Packet size exceeds threshold!"); 
return true;} 
return false;} 
void ReceivePacket(Ptr<Socket> socket){ 
Ptr<Packet> packet=socket->Recv(); 
if(DetectIntrusion(packet)){ 
NS_LOG_UNCOND("Intrusion logged for further analysis.");} 
else{NS_LOG_UNCOND("Normal packet received.");}} 
int main(int argc,char *argv[]){ 
NodeContainer nodes; 
nodes.Create(3); 
PointToPointHelper pointToPoint; 
pointToPoint.SetDeviceAttribute("DataRate",StringValue("5Mbps")); 
pointToPoint.SetChannelAttribute("Delay",StringValue("2ms")); 
NetDeviceContainer devices=pointToPoint.Install(nodes); 
InternetStackHelper stack; 
stack.Install(nodes); 
Ipv4AddressHelper address; 
address.SetBase("10.1.1.0","255.255.255.0"); 
Ipv4InterfaceContainer interfaces=address.Assign(devices); 
uint16_t port=9; 
UdpServerHelper server(port); 
ApplicationContainer serverApps=server.Install(nodes.Get(1)); 
serverApps.Start(Seconds(1.0)); 
serverApps.Stop(Seconds(10.0)); 
UdpClientHelper client(interfaces.GetAddress(1),port); 
client.SetAttribute("MaxPackets",UintegerValue(10)); 
client.SetAttribute("Interval",TimeValue(Seconds(1.0))); 
client.SetAttribute("PacketSize",UintegerValue(512)); 
ApplicationContainer clientApps=client.Install(nodes.Get(0)); 
clientApps.Start(Seconds(2.0)); 
clientApps.Stop(Seconds(10.0)); 
TypeId tid=TypeId::LookupByName("ns3::UdpSocketFactory"); 
Ptr<Socket> recvSocket=Socket::CreateSocket(nodes.Get(1),tid); 
InetSocketAddress local=InetSocketAddress(Ipv4Address::GetAny(),port); 
recvSocket->Bind(local); 
recvSocket->SetRecvCallback(MakeCallback(&ReceivePacket)); 
Simulator::Run(); 
Simulator::Destroy(); 
return 0; 
}
